{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/Modal/Modal.js","components/Phonebook/Phonebook.js","App.js","index.js"],"names":["useStyles","makeStyles","form","width","height","display","flexDirection","justifyContent","ContactForm","onInputChange","onButtonClick","classes","className","type","onChange","id","Button","variant","color","size","onClick","Filter","onInputFind","ContactList","filter","contacts","onFilterContacts","onDelete","map","name","number","modalRoot","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","target","currentTarget","Phonebook","useState","showModal","items","setItems","localStorage","getItem","parsedContacts","JSON","parse","prevState","setItem","stringify","isAlreadyContact","contact","includes","toggleModal","option","value","preventDefault","alert","uuidv4","toLowerCase","filterContacts","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.524075ff.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n  form: {\r\n    width: 275,\r\n    height: 150,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\n\r\nconst ContactForm = ({ onInputChange, onButtonClick }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.form}>\r\n      <label>Name</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"name\"></input>\r\n      <label>Number</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"number\"></input>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        type=\"button\"\r\n        onClick={onButtonClick}\r\n      >\r\n        Add contact\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onInputChange: PropTypes.func.isRequired,\r\n  onButtonClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ onInputFind }) => {\r\n  return (\r\n    <div>\r\n      <p>Find contacts by name</p>\r\n      <input type=\"text\" onChange={onInputFind} id=\"find\"></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onInputFind: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ContactList = ({ filter, contacts, onFilterContacts, onDelete }) => {\r\n  return (\r\n    <ul>\r\n      {(filter ? onFilterContacts() : contacts).map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <Button color=\"secondary\" type=\"button\" id={id} onClick={onDelete}>\r\n            Delete\r\n          </Button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onFilterContacts: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","// import React, { Component } from \"react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport \"./Modal.css\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\n// ========== HOOK =============\r\n\r\nconst Modal = ({ onClose, children }) => {\r\n  //   componentDidMount\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    //   componentWillUnmount\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.code === \"Escape\") {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = (event) => {\r\n    if (event.target === event.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Modal__backdrop\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal__content\">{children}</div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n\r\n// =========== CLASS =============\r\n// export default class Modal extends Component {\r\n//   componentDidMount() {\r\n//     window.addEventListener(\"keydown\", this.handleKeyDown);\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n//   }\r\n\r\n//   handleKeyDown = (event) => {\r\n//     if (event.code === \"Escape\") {\r\n//       this.props.onClose();\r\n//     }\r\n//   };\r\n\r\n//   handleBackdropClick = (event) => {\r\n//     if (event.target === event.currentTarget) {\r\n//       this.props.onClose();\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     return createPortal(\r\n//       <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\r\n//         <div className=\"Modal__content\">{this.props.children}</div>\r\n//       </div>,\r\n//       modalRoot\r\n//     );\r\n//   }\r\n// }\r\n","import React, { useState, useEffect } from \"react\";\r\n// import React, { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// ========== HOOK =============\r\n\r\nconst Phonebook = () => {\r\n  const [items, setItems] = useState({\r\n    contacts: [],\r\n    filter: \"\",\r\n    showModal: false,\r\n  });\r\n\r\n  //componentDidMount\r\n  useEffect(() => {\r\n    const contacts = localStorage.getItem(\"contacts\");\r\n    const parsedContacts = JSON.parse(contacts);\r\n    if (parsedContacts) {\r\n      setItems((prevState) => ({ ...prevState, contacts: parsedContacts }));\r\n    }\r\n\r\n    //componentWillUnMount\r\n    // return ()=>{};\r\n  }, []);\r\n\r\n  //   componentDidUpdate, after every render\r\n  // useEffect(() => {\r\n\r\n  // });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(items.contacts));\r\n  }, [items.contacts]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const option = event.target.id;\r\n    setItems((prevState) => ({ ...prevState, [option]: event.target.value }));\r\n  };\r\n\r\n  const handleButtonClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    isAlreadyContact()\r\n      ? alert(`${items.name} is already in contacts.`)\r\n      : setItems((prevState) => ({\r\n          ...prevState,\r\n          contacts: [\r\n            ...items.contacts,\r\n            { id: uuidv4(), name: items.name, number: items.number },\r\n          ],\r\n        }));\r\n  };\r\n\r\n  const handleInputFind = (event) => {\r\n    setItems((prevState) => ({\r\n      ...prevState,\r\n      filter: event.target.value,\r\n    }));\r\n  };\r\n\r\n  const filterContactsList = () => {\r\n    const filterContacts = items.contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(items.filter.toLowerCase())\r\n    );\r\n    return filterContacts;\r\n  };\r\n\r\n  const isAlreadyContact = () => {\r\n    const Names = items.contacts.map((contact) => contact.name);\r\n    const isAlreadyContact = Names.includes(items.name);\r\n    return isAlreadyContact;\r\n  };\r\n\r\n  const handleButtonDelete = (event) => {\r\n    const { contacts } = items;\r\n    const filterContacts = contacts.filter(\r\n      (contact) => contact.id !== event.currentTarget.id\r\n    );\r\n    setItems((prevState) => ({ ...prevState, contacts: filterContacts }));\r\n    toggleModal();\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setItems((prevState) => ({\r\n      ...prevState,\r\n      showModal: !items.showModal,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {items.showModal && (\r\n        <Modal onClose={toggleModal}>\r\n          <h1>Контакт удален</h1>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            type=\"button\"\r\n            onClick={toggleModal}\r\n          >\r\n            Закрыть\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <h1>Phonebook</h1>\r\n      <ContactForm\r\n        onInputChange={handleInputChange}\r\n        onButtonClick={handleButtonClick}\r\n      />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter onInputFind={handleInputFind} />\r\n      <ContactList\r\n        filter={items.filter}\r\n        contacts={items.contacts}\r\n        onFilterContacts={filterContactsList}\r\n        onDelete={handleButtonDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// =========== CLASS =============\r\n\r\n// class Phonebook extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     filter: \"\",\r\n//     showModal: false,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem(\"contacts\");\r\n//     const parsedContacts = JSON.parse(contacts);\r\n//     if (parsedContacts) {\r\n//       this.setState({ contacts: parsedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   handleInputChange = (event) => {\r\n//     const option = event.target.id;\r\n//     this.setState(() => ({ [option]: event.target.value }));\r\n//   };\r\n\r\n//   handleButtonClick = (event) => {\r\n//     const { name, number, contacts } = this.state;\r\n//     event.preventDefault();\r\n//     this.isAlreadyContact()\r\n//       ? alert(`${name} is already in contacts.`)\r\n//       : this.setState(() => ({\r\n//           contacts: [...contacts, { id: uuidv4(), name: name, number: number }],\r\n//         }));\r\n//   };\r\n\r\n//   handleInputFind = (event) => {\r\n//     this.setState(() => ({\r\n//       filter: event.target.value,\r\n//     }));\r\n//   };\r\n\r\n//   filterContactsList = () => {\r\n//     const { contacts, filter } = this.state;\r\n//     const filterContacts = contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n//     return filterContacts;\r\n//   };\r\n\r\n//   isAlreadyContact = () => {\r\n//     const { contacts } = this.state;\r\n//     const Names = contacts.map((contact) => contact.name);\r\n//     const isAlreadyContact = Names.includes(this.state.name);\r\n//     return isAlreadyContact;\r\n//   };\r\n\r\n//   handleButtonDelete = (event) => {\r\n//     const { contacts } = this.state;\r\n//     const filterContacts = contacts.filter(\r\n//       (contact) => contact.id !== event.currentTarget.id\r\n//     );\r\n//     this.setState(() => ({ contacts: filterContacts }));\r\n//     this.toggleModal();\r\n//   };\r\n\r\n//   toggleModal = () => {\r\n//     this.setState(({ showModal }) => ({ showModal: !showModal }));\r\n//   };\r\n\r\n//   render() {\r\n//     const { contacts, filter, showModal } = this.state;\r\n//     return (\r\n//       <div>\r\n//         {showModal && (\r\n//           <Modal onClose={this.toggleModal}>\r\n//             <h1>Контакт удален</h1>\r\n//             <Button\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               size=\"small\"\r\n//               type=\"button\"\r\n//               onClick={this.toggleModal}\r\n//             >\r\n//               Закрыть\r\n//             </Button>\r\n//           </Modal>\r\n//         )}\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm\r\n//           onInputChange={this.handleInputChange}\r\n//           onButtonClick={this.handleButtonClick}\r\n//         />\r\n//         <h2>Contacts</h2>\r\n//         <Filter onInputFind={this.handleInputFind} />\r\n//         <ContactList\r\n//           filter={filter}\r\n//           contacts={contacts}\r\n//           onFilterContacts={this.filterContactsList}\r\n//           onDelete={this.handleButtonDelete}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Phonebook;\r\n","import \"./App.css\";\nimport Phonebook from \"./components/Phonebook/Phonebook\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}